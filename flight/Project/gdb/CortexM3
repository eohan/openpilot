#
# Assorted CortexM3/M4 macros
#

define do_connect
	file $arg0
	target remote localhost:3333
	monitor cortex_m3 vector_catch all
end

# mask interrupts while single-stepping
define hook-step
	monitor cortex_m3 maskisr on
end
define hookpost-step
	monitor cortex_m3 maskisr off
end

define hook-stepi
	monitor cortex_m3 maskisr on
end

define hookpost-stepi
	monitor cortex_m3 maskisr off
end

define hook-next
	monitor cortex_m3 maskisr on
end

define hookpost-next
	monitor cortex_m3 maskisr off
end

define hook-finish
	monitor cortex_m3 maskisr on
end

define hookpost-finish
	monitor cortex_m3 maskisr off
end

define vecstate
	set $icsr  = *(uint32_t *)0xe000ed04
	set $vect  = $icsr & 0x1ff
	set $pend  = ($icsr & 0x1ff000) >> 12
	set $shcsr = *(uint32_t *)0xe000ed24
	set $cfsr  = *(uint32_t *)0xe000ed28
	set $bfsr  = ($cfsr >> 8) & 0xff
	set $ufsr  = ($cfsr >> 16) & 0xffff
	set $hfsr  = *(uint32_t *)0xe000ed2c
	set $bfar  = *(uint32_t *)0xe000ed38

	if $vect == 0
		printf "in thread mode\n"
	end
	if $vect == 4
		printf "MemManage fault (unexpected)\n"
	end
	if $hfsr != 0
		printf "HardFault"
		if $hfsr & (1<<1)
			printf " due to vector table read fault\n"
		end
		if $hfsr & (1<<30)
			printf " due to escalated or disabled configurable fault\n"
		end
		if $hfsr & (1<<31)
			printf " due to an unexpected debug event\n"
		end
	end
	if $bfsr != 0
		if $bfsr & (1<<2)
			printf "Imprecise "
		end
		if $bfsr & (1<<1)
			printf "Precise "
		end
		printf "BusFault"
			if $bfsr & (1<<7)
			printf " accessing 0x%08x", $bfar
		end
		if $bfsr & (1<<5)
			printf " during lazy FP state save"
		end
		if $bfsr & (1<<4)
			printf " during exception entry"
		end
		if $bfsr & (1<<3)
			printf " during exception return"
		end
		if $bfsr & (1<<1)
			printf " during instruction prefetch"
		end
		printf "\n"
	end
	if $ufsr != 0
		printf "UsageFault"
		if $ufsr & (1<<9)
			printf " due to divide-by-zero"
		end
		if $ufsr & (1<<8)
			printf " due to unaligned memory access"
		end
		if $ufsr & (1<<3)
			printf " due to access to disabled/absent coprocessor"
		end
		if $ufsr & (1<<2)
			printf " due to a bad EXC_RETURN value"
		end
		if $ufsr & (1<<1)
			printf " due to bad T or IT bits in EPSR"
		end
		if $ufsr & (1<<0)
			printf " due to executing an undefined instruction"
		end
		printf "\n"
	end
	if ($lr & 0xf0000000) == 0xf0000000
		if ($lr & 1)
			set $frame_ptr = (uint32_t *)$msp
		else
			set $frame_ptr = (uint32_t *)$psp
		end
		printf "  r0: %08x  r1: %08x  r2: %08x  r3: %08x\n, $frame_ptr[0], $frame_ptr[1], $frame_ptr[2], $frame_ptr[3]
		printf "  r4: %08x  r5: %08x  r6: %08x  r7: %08x\n", $r4, $r5, $r6, $r7
		printf "  r8: %08x  r9: %08x r10: %08x r11: %08x\n", $r8, $r9, $r10, $r11
		printf " r12: $08x  lr: %08x  pc: %08xx PSR: %08x\n", $frame_ptr[4], $frame_ptr[5], $frame_ptr[6], $frame_ptr[7]

		# Swap to the context of the faulting code and try to print a backtrace
		set $saved_sp = $sp
		if $lr & 0x10
			set $sp = $frame_ptr + (8 * 4)
		else
			set $sp = $frame_ptr + (26 * 4)
		end
		set $saved_lr = $lr
		set $lr = $frame_ptr[5]
		set $saved_pc = $pc
		set $pc = $frame_ptr[6]
		bt
		set $sp = $saved_sp
		set $lr = $saved_lr
		set $pc = $saved_pc
	end
end
